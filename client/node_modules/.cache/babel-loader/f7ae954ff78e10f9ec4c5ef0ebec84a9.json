{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport const mongoApi = createApi({\n  reducerPath: 'mongo/api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:3000/api\"\n  }),\n  endpoints: build => ({\n    sendPost: build.mutation({\n      query: value => ({\n        url: \"/test\",\n        method: \"POST\",\n        body: value\n      }),\n      transformErrorResponse: () => console.log(\"wefwef\")\n    }),\n    getPosts: build.query({\n      query: () => ({\n        url: \"/test\",\n        method: \"GET\"\n      }),\n      transformResponse: response => response\n    }),\n    deletePost: build.mutation({\n      query: id => ({\n        url: \"/test-delete\",\n        method: \"POST\"\n      })\n    })\n  })\n});\nexport const {\n  useSendPostMutation,\n  useLazyGetPostsQuery,\n  useDeletePostMutation\n} = mongoApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","mongoApi","reducerPath","baseQuery","baseUrl","endpoints","build","sendPost","mutation","query","value","url","method","body","transformErrorResponse","console","log","getPosts","transformResponse","response","deletePost","id","useSendPostMutation","useLazyGetPostsQuery","useDeletePostMutation"],"sources":["C:/Users/User/Desktop/typescript/client/src/store/mongodb/mongodb.api.ts"],"sourcesContent":["import { createApi,fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nimport { IRepo, Item, ServerResponse} from \"../../models/models\";\r\nimport { GetType, PostType } from \"../../pages/Posts\";\r\n\r\nexport const mongoApi=createApi({\r\n    reducerPath:'mongo/api',\r\n    baseQuery: fetchBaseQuery({\r\n                        baseUrl:\"http://localhost:3000/api\"\r\n                    }),\r\n    endpoints:build=>({\r\n                      sendPost:build.mutation<any,PostType>({\r\n                        query:(value:PostType)=>({ \r\n                            url:\"/test\",\r\n                            method:\"POST\",\r\n                            body:value,\r\n                        }), \r\n                        transformErrorResponse:()=>console.log(\"wefwef\")\r\n                       \r\n                      }),\r\n                      getPosts:build.query<GetType[],null>({\r\n                        query:()=>({\r\n                            url:\"/test\",\r\n                            method:\"GET\",\r\n                        }),\r\n                        transformResponse:(response:GetType[])=>response\r\n                    \r\n                      }),\r\n                      deletePost:build.mutation<any,string>({\r\n                        query:(id:string)=>({\r\n                            url:\"/test-delete\",\r\n                            method:\"POST\",\r\n\r\n                        })\r\n                      })\r\n                    })\r\n})\r\n\r\nexport const {useSendPostMutation,useLazyGetPostsQuery, useDeletePostMutation}=mongoApi"],"mappings":"AAAA,SAASA,SAAS,EAACC,cAAc,QAAQ,8BAA8B;AAKvE,OAAO,MAAMC,QAAQ,GAACF,SAAS,CAAC;EAC5BG,WAAW,EAAC,WAAW;EACvBC,SAAS,EAAEH,cAAc,CAAC;IACNI,OAAO,EAAC;EACZ,CAAC,CAAC;EAClBC,SAAS,EAACC,KAAK,KAAG;IACAC,QAAQ,EAACD,KAAK,CAACE,QAAQ,CAAe;MACpCC,KAAK,EAAEC,KAAc,KAAI;QACrBC,GAAG,EAAC,OAAO;QACXC,MAAM,EAAC,MAAM;QACbC,IAAI,EAACH;MACT,CAAC,CAAC;MACFI,sBAAsB,EAAC,MAAIC,OAAO,CAACC,GAAG,CAAC,QAAQ;IAEjD,CAAC,CAAC;IACFC,QAAQ,EAACX,KAAK,CAACG,KAAK,CAAiB;MACnCA,KAAK,EAAC,OAAK;QACPE,GAAG,EAAC,OAAO;QACXC,MAAM,EAAC;MACX,CAAC,CAAC;MACFM,iBAAiB,EAAEC,QAAkB,IAAGA;IAE1C,CAAC,CAAC;IACFC,UAAU,EAACd,KAAK,CAACE,QAAQ,CAAa;MACpCC,KAAK,EAAEY,EAAS,KAAI;QAChBV,GAAG,EAAC,cAAc;QAClBC,MAAM,EAAC;MAEX,CAAC;IACH,CAAC;EACH,CAAC;AACrB,CAAC,CAAC;AAEF,OAAO,MAAM;EAACU,mBAAmB;EAACC,oBAAoB;EAAEC;AAAqB,CAAC,GAACvB,QAAQ"},"metadata":{},"sourceType":"module"}